#!/usr/bin/env python3

import argparse
import fnmatch
import itertools
import json
import os
import re

import grammar


parser = argparse.ArgumentParser()
parser.add_argument('paths', type=str, default=['./'], nargs='*', help='path to process')
parser.add_argument('--squeeze', action='store_true', help='removes comments and extra whitespace')
parser.add_argument('--debug', action='store_true', help='prints brackets tree')
args = parser.parse_args()

config_filename = os.path.expanduser('~/.styleninjarc')
config = json.loads(open(config_filename, 'r').read())

def make_error(line, message):
    return { 'line': line+1, 'message': message }

def get_line(lines, pos):
    row = 0
    column = 0
    for line in lines:
        if pos > len(line):
            pos -= len(line) + 1
            row += 1
        else:
            return row
    print(row)
    return row

def check_tabs(lines):
    errors = []
    for i, line in enumerate(lines):
        if line.find('\t') != -1:
            errors.append(make_error(i, 'Tab symbol has occurred.'))
    return errors

def check_line_endings(lines):
    errors = []
    for i, line in enumerate(lines):
        if re.search('[ \t\r]$', line) != None:
            errors.append(make_error(i, 'Trailing whitespace has occurred.'))
    return errors

def check_last_line(lines):
    errors = []
    last_lines = lines[-2:]
    if len(last_lines) == 1 and last_lines[0] == '':
        errors.append(make_error(len(lines)-1, 'Last line in empty file is empty.'))
    if len(last_lines) == 2 and last_lines[1] != '' and last_lines[0] != '':
        errors.append(make_error(len(lines)-1, 'No newline at end of file.'))
    if len(last_lines) == 2 and last_lines[1] == '' and last_lines[0] == '':
        errors.append(make_error(len(lines)-1, 'Too many newlines at end of file.'))
    return errors

def check_indents(lines):
    errors = []
    for i, line in enumerate(lines):
        indent_length = len(re.search('^( *)', line).group(1))
        if indent_length % 4 != 0:
            errors.append(make_error(i, 'Wrong indent has occurred.'))
    return errors

def check_dummy(lines):
    errors = []
    return errors

def process(filename):
    errors = []
    try:
        lines = open(filename, 'r').read().split('\n')
        errors += check_tabs(lines)
        errors += check_line_endings(lines)
        errors += check_last_line(lines)
        errors += check_indents(lines)
        errors += check_dummy(lines)
    except UnicodeDecodeError:
        errors.append(make_error(-1, 'Can\'t read file.'))
    for error in errors:
        error.update({ 'filename': filename })
    return errors

files = []
for path in args.paths:
    if os.path.isfile(path):
        for pattern in config['extensions']:
            if fnmatch.fnmatch(path, pattern):
                files.append(path)
                break
    for root, dirnames, filenames in os.walk(path):
        for filename in filenames:
            for pattern in config['extensions']:
                if fnmatch.fnmatch(filename, pattern):
                    files.append(os.path.join(root, filename))
                    break

if args.squeeze:
    for file in files:
        blocks = grammar.parse_raw(open(file, 'r').read())
        filtered = list(filter(lambda block: block['type'] != 'newline' and block['type'] != 'comment' and block['type'] != 'whitespace', blocks))
        nothing = [{ 'type': 'nothing', 'data': '' }]
        prev = itertools.chain(nothing, filtered)
        next = itertools.chain(filtered, nothing)
        open(file, 'w').write(''.join(map(lambda p: p[0]['data'] + ' ' if (p[0]['type'] == 'name' or p[0]['type'] == 'integer') and (p[1]['type'] == 'name' or p[1]['type'] == 'integer') else p[0]['data'] + '\n' if p[0]['type'] == 'directive' or p[0]['type'] != 'nothing' and p[1]['type'] == 'directive' else p[0]['data'], zip(prev, next))))

elif args.debug:
    for file in files:
        blocks = grammar.parse_raw(open(file, 'r').read())
        brackets = grammar.parse_blocks(blocks)

        def print_with_prefix(prefix, brackets):
            for bracket in brackets:
                if bracket['type'] in ('newline', 'whitespace', 'comment'):
                    continue
                is_list = isinstance(bracket['data'], list)
                print(prefix, bracket['data'] if not is_list else bracket['type'])
                if is_list:
                    print_with_prefix(prefix + '----', bracket['data'])
                    print(prefix, '})]'['{(['.find(bracket['type'])])
        print_with_prefix('', brackets)

else:
    errors = []
    for file in files:
        errors += process(file)
    for error in errors:
        print(error['filename'] + '(' + str(error['line']) + '): ' + error['message'])
