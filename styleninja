#!/usr/bin/env python3

import argparse
import fnmatch
import itertools
import json
import os
import re
import sys

import grammar


parser = argparse.ArgumentParser()
parser.add_argument('paths', type=str, default=['./'], nargs='*', help='paths to process')
parser.add_argument('--squeeze', action='store_true', help='removes comments and extra whitespace')
parser.add_argument('--debug', action='store_true', help='prints brackets tree')
parser.add_argument('--test', action='store_true', help='internal testing mode')
parser.add_argument('--trivial', action='store_true', help='only check for tabs and whitespace before ends of lines')
args = parser.parse_args()

config_filename = os.path.expanduser('~/.styleninjarc')
if not os.path.isfile(config_filename):
    def get_script_path():
        return os.path.dirname(os.path.realpath(sys.argv[0]))
    import shutil
    shutil.copyfile(get_script_path() + '/.styleninjarc', config_filename)
config = json.loads(open(config_filename, 'r').read())

def make_error(line, message):
    return { 'line': line+1, 'message': message }

def errors_to_text(errors):
    text = ''
    for error in errors:
        text += error['filename'] + '(' + str(error['line']) + '): ' + error['message'] + '\n'
    return text

def get_line(lines, pos):
    row = 0
    for line in lines:
        if pos > len(line):
            pos -= len(line) + 1
            row += 1
        else:
            return row
    return row

def set_lines_in_brackets(brackets, lines, row=0, col=0, pos=0):
    def go_to_pos(goal_pos):
        nonlocal lines
        nonlocal row
        nonlocal col
        nonlocal pos
        while row < len(lines):
            line_pos = pos-col
            if goal_pos-line_pos > len(lines[row]):
                col = 0
                pos = line_pos + len(lines[row]) + 1
                row += 1
            else:
                col = goal_pos-line_pos
                pos = goal_pos
                break

    for bracket in brackets:
        if 'pos' in bracket:
            go_to_pos(bracket['pos'])
            bracket['line'] = row
        if isinstance(bracket['data'], list):
            (row, col, pos) = set_lines_in_brackets(bracket['data'], lines, row=row, col=col, pos=pos)
        if 'end' in bracket:
            go_to_pos(bracket['end'])
            bracket['end_line'] = row
    return (row, col, pos)

def check_tabs(lines):
    errors = []
    for i, line in enumerate(lines):
        if line.find('\t') != -1:
            errors.append(make_error(i, 'Tab symbol has occurred.'))
    return errors

def check_line_endings(lines):
    errors = []
    for i, line in enumerate(lines):
        if re.search('[ \t\r]$', line) != None:
            errors.append(make_error(i, 'Trailing whitespace has occurred.'))
    return errors

def check_last_line(lines):
    errors = []
    last_lines = lines[-2:]
    if len(last_lines) == 1 and last_lines[0] == '':
        errors.append(make_error(len(lines)-1, 'Last line in empty file is empty.'))
    if len(last_lines) == 2 and last_lines[1] != '' and last_lines[0] != '':
        errors.append(make_error(len(lines)-1, 'No newline at end of file.'))
    if len(last_lines) == 2 and last_lines[1] == '' and last_lines[0] == '':
        errors.append(make_error(len(lines)-1, 'Too many newlines at end of file.'))
    return errors

def check_indents(lines):
    errors = []
    for i, line in enumerate(lines):
        indent_length = len(re.search('^( *)', line).group(1))
        if indent_length % 4 != 0:
            errors.append(make_error(i, 'Wrong indent has occurred.'))
    return errors

def check_indents_smart(lines):
    errors = []
    last_line = None
    blocks = grammar.parse_raw('\n'.join(lines))
    brackets = grammar.parse_blocks(blocks)
    set_lines_in_brackets(brackets, lines)

    def check_indent(line, level):
        nonlocal errors
        nonlocal lines
        nonlocal last_line
        if line == last_line:
            return
        indent_length = len(re.search('^( *)', lines[line]).group(1))
        if indent_length != level * 4:
            errors.append(make_error(line, 'Wrong indent has occurred.'))
        last_line = line
    
    def is_access_specifier(bracket):
        return bracket != None and bracket['type'] == 'name' and bracket['data'] in ('public', 'private', 'protected')

    def is_template(bracket):
        return bracket != None and bracket['type'] == 'name' and bracket['data'] == 'template'

    def is_flow_keyword(bracket):
        return bracket != None and bracket['type'] == 'name' and bracket['data'] in ('if', 'for', 'while', 'do', 'else')

    def is_case(bracket):
        return bracket != None and bracket['type'] == 'name' and bracket['data'] in ('case', 'default')

    def is_enum(bracket):
        return bracket != None and bracket['type'] == 'name' and bracket['data'] == 'enum'

    def is_namespace(bracket):
        return bracket != None and bracket['type'] == 'name' and bracket['data'] == 'namespace'

    def is_class(bracket):
        return bracket != None and bracket['type'] == 'name' and bracket['data'] in ('class', 'struct')

    def check(level, brackets, in_big_indent=False, in_round_brackets=False, in_enum=False, base_line=-1, base_level=0):
        nonlocal errors
        last_statement_first_line = None
        new_statement = True
        namespace = False
        big_indent = False
        last_non_whitespace_bracket = None
        template_statement = False
        expect_flow_substatement = False
        expect_flow_brackets = False
        enum = False
        in_class = False
        in_case = False
        flow_keywords = 0
        for bracket in brackets:
            if bracket['type'] in ('newline', 'whitespace', 'comment', 'directive'):
                continue
            if bracket['type'] == 'truncate':
                errors.append(make_error(line, 'File is truncated.'))
                continue
            in_case |= is_case(bracket)

            line = bracket['line']

            if new_statement:
                big_indent = False
                in_class = False
                last_statement_first_line = line
                new_statement = False
                template_statement = is_template(bracket)
                enum = is_enum(bracket)
                namespace = is_namespace(bracket)
                flow_keywords = 0

            in_class |= is_class(bracket)

            if expect_flow_substatement:
                last_statement_first_line = line
                expect_flow_substatement = False
                flow_keywords += 1

            if expect_flow_brackets:
                if bracket['type'] == '(':
                    expect_flow_substatement = True
                expect_flow_brackets = False

            long_statement = line != last_statement_first_line and bracket['type'] != '{' and not template_statement
            expected_level = level
            if in_round_brackets and bracket['type'] == '{':
                expected_level = base_level

            if flow_keywords > 0:
                if bracket['type'] == '{':
                    expected_level += flow_keywords-1
                else:
                    expected_level += flow_keywords

            if in_case and not is_case(bracket):
                expected_level += 1

            if in_class and not is_class(bracket) and bracket['type'] != '{':
                expected_level += config['big_indent']
                big_indent = True
            elif long_statement and not in_round_brackets:
                expected_level += 1
                big_indent = True

            if not in_class and is_access_specifier(bracket):
                expected_level -= 1

            check_indent(line, expected_level)
            if is_flow_keyword(bracket):
                expect_flow_brackets = True
            if bracket['type'] == 'unknown' and bracket['data'] == ',' and (in_enum or in_round_brackets):
                new_statement = True
            if bracket['type'] == 'unknown' and bracket['data'] == ';':
                new_statement = True
            if bracket['type'] == 'unknown' and bracket['data'] == ':' and (is_access_specifier(last_non_whitespace_bracket) or in_case):
                new_statement = True
            if isinstance(bracket['data'], list):
                sub_level = expected_level
                sub_big_indent = big_indent or in_big_indent
                if base_line != line:
                    if namespace:
                        sub_level += config['namespace_indent']
                    elif bracket['type'] != '(':
                        sub_level += 1
                        sub_big_indent = in_big_indent
                    elif bracket['type'] == '(':
                        sub_level += 1 if sub_big_indent else config['big_indent']
                        sub_big_indent = True
                check(sub_level, bracket['data'],
                        in_big_indent=sub_big_indent,
                        in_round_brackets=bracket['type'] == '(',
                        in_enum=enum,
                        base_line=line,
                        base_level=expected_level)
                check_indent(bracket['end_line'], expected_level)
                if bracket['type'] == '{':
                    new_statement = True
            last_non_whitespace_bracket = bracket

    check(0, brackets)
    
    return errors

def check_dummy(lines):
    errors = []
    return errors

def process(filename, trivial):
    errors = []
    try:
        lines = open(filename, 'r').read().split('\n')
        errors += check_tabs(lines)
        errors += check_line_endings(lines)
        if not trivial:
            errors += check_last_line(lines)
            errors += check_indents(lines)
            errors += check_indents_smart(lines)
            errors += check_dummy(lines)
    except UnicodeDecodeError:
        errors.append(make_error(-1, 'Can\'t read file.'))
    for error in errors:
        error.update({ 'filename': filename })
    return errors

files = []
for path in args.paths:
    if os.path.isfile(path):
        for pattern in config['extensions']:
            if fnmatch.fnmatch(path, pattern):
                files.append(path)
                break
    for root, dirnames, filenames in os.walk(path):
        for filename in filenames:
            for pattern in config['extensions']:
                if fnmatch.fnmatch(filename, pattern):
                    files.append(os.path.join(root, filename))
                    break

if args.squeeze:
    for file in files:
        blocks = grammar.parse_raw(open(file, 'r').read())
        filtered = list(filter(lambda block: block['type'] != 'newline' and block['type'] != 'comment' and block['type'] != 'whitespace', blocks))
        nothing = [{ 'type': 'nothing', 'data': '' }]
        prev = itertools.chain(nothing, filtered)
        next = itertools.chain(filtered, nothing)
        open(file, 'w').write(''.join(map(lambda p: p[0]['data'] + ' ' if (p[0]['type'] == 'name' or p[0]['type'] == 'integer') and (p[1]['type'] == 'name' or p[1]['type'] == 'integer') else p[0]['data'] + '\n' if p[0]['type'] == 'directive' or p[0]['type'] != 'nothing' and p[1]['type'] == 'directive' else p[0]['data'], zip(prev, next))))

elif args.debug:
    for file in files:
        blocks = grammar.parse_raw(open(file, 'r').read())
        brackets = grammar.parse_blocks(blocks)

        def print_with_prefix(prefix, brackets):
            for bracket in brackets:
                if bracket['type'] in ('newline', 'whitespace', 'comment'):
                    continue
                is_list = isinstance(bracket['data'], list)
                print(prefix, bracket['data'] if not is_list else bracket['type'])
                if is_list:
                    print_with_prefix(prefix + '----', bracket['data'])
                    print(prefix, '})]>'['{([<'.find(bracket['type'])])

        print_with_prefix('', brackets)

else:
    errors = []
    for file in files:
        errors += sorted(process(file, args.trivial == True), key=lambda e: e['line'])
    if args.test:
        expected = []
        for file in files:
            def get_results(input_file, results_file):
                expected = []
                lines = open(results_file, 'r').read().split('\n')
                for row, line in enumerate(lines):
                    if len(line) > 0:
                        expected.append({ 'filename': input_file, 'line': row+1, 'message': line })
                return expected
            expected += get_results(file, file+'.result')
        result = errors_to_text(errors)
        expected = errors_to_text(expected)
        if result == expected:
            sys.exit(0)
        else:
            import difflib
            print(''.join(difflib.ndiff(result.splitlines(keepends=True), expected.splitlines(keepends=True))), end='')
            sys.exit(1)
    print(errors_to_text(errors), end='')
    if len(errors) > 0:
        sys.exit(1)
